<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cpp on Xu Xu</title>
    <link>https://xuhongxu.com/en/categories/cpp/</link>
    <description>Recent content in cpp on Xu Xu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Hongxu Xu © 2020 苏ICP备2021014763号-1</copyright>
    <lastBuildDate>Fri, 28 Jun 2019 21:56:00 +0000</lastBuildDate>
    
	<atom:link href="https://xuhongxu.com/en/categories/cpp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RValue-Reference, Move Constructor and Perfect Forwarding</title>
      <link>https://xuhongxu.com/en/2019/06/rvalue-reference-move-constructor-and-perfect-forwarding/</link>
      <pubDate>Fri, 28 Jun 2019 21:56:00 +0000</pubDate>
      
      <guid>https://xuhongxu.com/en/2019/06/rvalue-reference-move-constructor-and-perfect-forwarding/</guid>
      <description>Background I&amp;rsquo;ve thought I was good at C++, however, after my friend asking me about rvalue, I realized that I knew nothing about the strength of C++.
In this article, I won&amp;rsquo;t introduce either rvalue or move constructor. Instead, I will describe and dig into his question and try to explain what benefits the move constructor provides.
Question For std::map&amp;lt;Key, T, Compare, Allocator&amp;gt;::insert, there are two overloadings:
  since C++11</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Virtual Table - Explained thru Assemblies</title>
      <link>https://xuhongxu.com/en/2019/05/c-virtual-table-explained-thru-assemblies/</link>
      <pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://xuhongxu.com/en/2019/05/c-virtual-table-explained-thru-assemblies/</guid>
      <description>C++ Virtual Table Code C++ Sources #include &amp;lt;string&amp;gt;#include &amp;lt;iostream&amp;gt; class Base { public: virtual const char* Name() const { return &amp;#34;Base&amp;#34;; } virtual const char* BaseName() const { return &amp;#34;Base&amp;#34;; } int a = 1; int t = 2; }; class DerivedC : public Base { public: virtual const char* Name() const override { return &amp;#34;Derived&amp;#34;; } int b = 3; double c = 4.0; }; int main() { Base* base = new DerivedC; base-&amp;gt;Name(); base-&amp;gt;BaseName(); delete base; return 0; } Compiled Assemblies .</description>
    </item>
    
  </channel>
</rss>